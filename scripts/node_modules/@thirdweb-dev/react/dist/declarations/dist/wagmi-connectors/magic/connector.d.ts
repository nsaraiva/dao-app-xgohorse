import { RequiredParam } from "../../types/types";
import { OAuthExtension, OAuthProvider } from "@magic-ext/oauth";
import { InstanceWithExtensions, MagicSDKAdditionalConfiguration, SDKBase } from "@magic-sdk/provider";
import { Chain, Connector } from "@wagmi/core";
import { Signer } from "ethers";
export interface MagicConnectorOptions {
    apiKey: string;
    oauthOptions?: {
        providers: OAuthProvider[];
        callbackUrl?: string;
    };
    additionalMagicOptions?: MagicSDKAdditionalConfiguration<string, OAuthExtension[]>;
}
export declare type ConnectionInfo = {
    email: string;
    phoneNumber?: string;
    oauthProvider?: OAuthProvider;
} | {
    email?: string;
    phoneNumber: string;
    oauthProvider?: OAuthProvider;
} | {
    email?: string;
    phoneNumber?: string;
    oauthProvider: OAuthProvider;
};
export declare class MagicConnector extends Connector {
    ready: boolean;
    readonly id = "magic";
    readonly name = "Magic";
    provider: any;
    magicSDK: InstanceWithExtensions<SDKBase, OAuthExtension[]> | undefined;
    isModalOpen: boolean;
    magicOptions: MagicConnectorOptions;
    oauthProviders: OAuthProvider[];
    oauthCallbackUrl: string | undefined;
    connectionInfo: ConnectionInfo | undefined;
    constructor(config: {
        chains?: Chain[] | undefined;
        options: MagicConnectorOptions;
    });
    connect(): Promise<{
        provider: any;
        chain: {
            id: number;
            unsupported: boolean;
        };
        account: string;
    }>;
    getAccount(): Promise<string>;
    getProvider(): Promise<any>;
    getSigner(): Promise<Signer>;
    isAuthorized(): Promise<boolean>;
    getMagicSDK(): InstanceWithExtensions<SDKBase, OAuthExtension[]>;
    getChainId(): Promise<number>;
    protected onAccountsChanged(accounts: string[]): void;
    protected onChainChanged(chainId: string | number): void;
    protected onDisconnect(): void;
    disconnect(): Promise<void>;
    setConnectionInfo(connectionInfo: RequiredParam<ConnectionInfo>): void;
}
